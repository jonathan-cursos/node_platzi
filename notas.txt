Conceptualmente: Rutas, controladores y bases de datos

-Para saber como va a funcionar conceptualmente nuestra aplicación, ver la imagen de diagrama, contiene como
  funcionará esta app, y ayudará a dividir los archivos en carpetas y archivos.
-Viendolas así, notamos 3 capas:
  -Capa principal: server.js.
  -Capa de red: routes, response.
  -Capa de componentes: Viene cada componente.

-server.js: Recibe las peticiones que vienen de internet.
-routes.js: Este archivo verá hacía donde quiere ir la petición, y la envía a ese componente.

Componentes: Cada componente será una carpeta con el nombre de ese componente, y tendrá los sig. archivos:
  -network: Recibe la petición, y gestiona todo lo relacionado con http. Le pasará toda la información al
    controller.
  -controller: Tendrá toda la lógica del componente (llamada Lógica del negocio). Suponiendo que tenemos un
    componente 'mensajes', sí este necesita una fecha, si debemos hacer comprobaciones de que todo venga bien,
    necesitamos llamar a otro componente, etc, se hará en este archivo.
  -store: La información que sale del controller debemos almacenarla en una DB, no es escalable tener la DB
    dentro del controller, porque sí necesitaramos hacer algun cambio de proveedor, habría que cambiar todo, 
    entonces, la gestión de la DB se hará en este archivo. La unica responsabilidad de este archivo es decir 
    donde y como se guarda la info. Es importante porque todos los componentes van a componerse igual, pero sí
    un componente lo queremos guardar en otra DB, solo cambiamos el archivo store de ese componente.

response.js: Teniendo muchos componentes, para hacer que todas las respuestas sean iguales, el archivo de 
  network enviará la respuesta al response, este gestionará las respuestas. Este archivo será el que 
  responderá al cliente final.